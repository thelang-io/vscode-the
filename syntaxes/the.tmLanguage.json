{
  "scopeName": "source.the",
  "patterns": [
    {
      "name": "comment.line.shebang.the",
      "match": "\\A(#!).*(?=$)",
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.the"
        }
      }
    },
    {
      "include": "#comments"
    },
    {
      "include": "#statements"
    }
  ],
  "repository": {
    "block": {
      "name": "meta.block.the",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.the"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.the"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#statements"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block.documentation.the",
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.the"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.the"
            }
          }
        },
        {
          "name": "comment.line.double-slash.the",
          "begin": "//",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.the"
            }
          },
          "end": "$",
          "endCaptures": {
            "0": {
              "name": "punctuation.terminator.statement.the"
            }
          }
        }
      ]
    },
    "expressions": {
      "patterns": [
        {
          "include": "#expression-array"
        },
        {
          "include": "#expression-call"
        },
        {
          "include": "#expression-literal"
        },
        {
          "include": "#expression-object"
        },
        {
          "include": "#expression-reference"
        },
        {
          "include": "#expression-ternary"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#expression-access"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.the"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.the"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#expressions"
            }
          ]
        }
      ]
    },
    "expression-access": {
      "patterns": [
        {
          "name": "variable.other.readwrite.the",
          "match": "[_[:alpha:]]\\w*"
        },
        {
          "name": "",
          "match": "(\\.)(\\s*[_[:alpha:]]\\w*)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.the"
            },
            "2": {
              "name": "variable.other.property.the"
            }
          }
        },
        {
          "begin": "(?<=[_[:alpha:]]\\w*|\\])\\s*(\\[)",
          "beginCaptures": {
            "1": {
              "name": "meta.brace.square.the"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "meta.brace.square.the"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#expressions"
            }
          ]
        }
      ]
    },
    "expression-array": {
      "name": "meta.array.literal.the",
      "begin": "(?<![_[:alpha:]]\\w*|\\])(\\[)",
      "beginCaptures": {
        "1": {
          "name": "meta.brace.square.the"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "meta.brace.square.the"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#expressions"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "expression-call": {
      "name": "meta.function-call.the",
      "begin": "((?:[_[:alpha:]]\\w*)(?:\\s*\\.\\s*(?:[_[:alpha:]]\\w*))*)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.the"
        },
        "2": {
          "name": "meta.brace.round.the"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.the"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#expressions"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "expression-literal": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.the",
          "match": "(?<!\\w|\\.)(\\btrue)(?!\\w|\\.)"
        },
        {
          "name": "constant.language.boolean.false.the",
          "match": "(?<!\\w|\\.)(\\bfalse)(?!\\w|\\.)"
        },
        {
          "name": "constant.language.nil.the",
          "match": "(?<!\\w|\\.)(\\bnil)(?!\\w|\\.)"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#strings"
        }
      ]
    },
    "expression-object": {
      "name": "meta.objectliteral.the",
      "begin": "([_[:alpha:]]\\w*)\\s*(\\{)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.type.object.the"
        },
        "2": {
          "name": "punctuation.definition.block.the"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.the"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#expression-object-member"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "expression-object-member": {
      "name": "meta.object.member.the",
      "begin": "([_[:alpha:]]\\w*)\\s*(:)",
      "beginCaptures": {
        "1": {
          "name": "meta.object-literal.key.the"
        },
        "2": {
          "name": "punctuation.separator.key-value.the"
        }
      },
      "end": "(?=,|\\}|$|\\/[\\/|\\*])",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#expressions"
        }
      ]
    },
    "expression-reference": {
      "name": "meta.reference.the",
      "begin": "(?<!\\w|\\.)(\\bref)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.expression.reference.the"
        }
      },
      "end": "(?=[;}]|$)",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#expressions"
        }
      ]
    },
    "expression-ternary": {
      "begin": "\\?",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator.ternary.the"
        }
      },
      "end": ":",
      "endCaptures": {
        "0": {
          "name": "keyword.operator.ternary.the"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#expressions"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.catch-exception.the",
          "match": "(?<!\\w|\\.)(try|catch|throw)(?!\\w|\\.)"
        },
        {
          "name": "keyword.control.the",
          "match": "(?<!\\w|\\.)(break|continue|elif|else|if|loop|return)(?!\\w|\\.)"
        },
        {
          "name": "keyword.control.the",
          "match": "(?<!\\w|\\.)(async|await)(?!\\w|\\.)"
        },
        {
          "name": "keyword.control.the",
          "match": "(?<!\\w|\\.)(import|from|export)(?!\\w|\\.)"
        },
        {
          "name": "keyword.declaration.the",
          "match": "(?<!\\w|\\.)(const|enum|fn|main|obj|union)(?!\\w|\\.)"
        },
        {
          "name": "keyword.operator.expression.is.the",
          "match": "(?<!\\w|\\.)(is)(?!\\w|\\.)"
        },
        {
          "name": "storage.modifier.the",
          "match": "(?<!\\w|\\.)(mut|ref)(?!\\w|\\.)"
        }
      ]
    },
    "numbers": {
      "name": "constant.numeric.the",
      "match": "(?<!\\w|\\.)((0(b|B)[0-1]*)|0(o|O)[0-7]*)|(0(x|X)[0-9a-fA-F]*)|((\\d+\\.?\\d*)((e|E)(\\+|-)?\\d+)?)(?!\\w|\\.)"
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.compound.the",
          "match": "%=|\\+=|\\*=|\\/=|\\-="
        },
        {
          "name": "keyword.operator.assignment.compound.bitwise.the",
          "match": "&=|\\^=|\\|=|<<=|>>="
        },
        {
          "name": "keyword.operator.comparison.the",
          "match": "==|!="
        },
        {
          "name": "keyword.operator.assignment.the",
          "match": "\\=|\\:\\="
        },
        {
          "name": "keyword.operator.bitwise.shift.the",
          "match": "<<|>>"
        },
        {
          "name": "keyword.operator.decrement.the",
          "match": "\\-\\-"
        },
        {
          "name": "keyword.operator.increment.the",
          "match": "\\+\\+"
        },
        {
          "name": "keyword.operator.logical.the",
          "match": "\\!|&&|\\|\\|"
        },
        {
          "name": "keyword.operator.arithmetic.the",
          "match": "%|\\+|\\*|\\/|\\-"
        },
        {
          "name": "keyword.operator.bitwise.the",
          "match": "&|~|\\^|\\|"
        },
        {
          "name": "keyword.operator.relational.the",
          "match": "<=?|>=?"
        },
        {
          "name": "keyword.operator.ternary.the",
          "match": "\\?|\\:"
        }
      ]
    },
    "punctuation-comma": {
      "name": "punctuation.separator.comma.the",
      "match": ","
    },
    "punctuation-semicolon": {
      "name": "punctuation.terminator.statement.the",
      "match": ";"
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.the",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.the"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.the"
            }
          },
          "patterns": [
            {
              "include": "#string-character-escape"
            }
          ]
        },
        {
          "name": "string.quoted.single.the",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.the"
            }
          },
          "end": "(')|$",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.the"
            }
          },
          "patterns": [
            {
              "include": "#string-character-escape"
            }
          ]
        }
      ]
    },
    "string-character-escape": {
      "patterns": [
        {
          "name": "constant.character.escape.the",
          "match": "\\\\[0bfnrtv\\\\'\"]"
        },
        {
          "name": "invalid.illegal.unknown-escape.the",
          "match": "\\\\[^0bfnrtv\\'\"]"
        }
      ]
    },
    "statements": {
      "patterns": [
        {
          "include": "#statement-function-declaration"
        },
        {
          "include": "#statement-if"
        },
        {
          "include": "#statement-loop"
        },
        {
          "include": "#statement-main"
        },
        {
          "include": "#statement-object-declaration"
        },
        {
          "include": "#statement-return"
        },
        {
          "include": "#statement-variable-declaration"
        },
        {
          "include": "#expressions"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "statement-function-declaration": {
      "name": "meta.function.the",
      "begin": "(?<!\\w|\\.)(?:(\\bexport)\\s+)?(?:(\\basync)\\s+)?(\\bfn)\\s+([_[:alpha:]]\\w*)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.the"
        },
        "2": {
          "name": "storage.modifier.async.the"
        },
        "3": {
          "name": "storage.type.function.the"
        },
        "4": {
          "name": "meta.definition.function.the entity.name.function.the"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#statement-function-declaration-parameters"
        },
        {
          "include": "#statement-function-declaration-return-type"
        },
        {
          "include": "#block"
        }
      ]
    },
    "statement-function-declaration-parameters": {
      "name": "meta.parameters.the",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.begin.the"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.the"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#statement-function-declaration-parameter"
        },
        {
          "name": "punctuation.separator.parameter.the",
          "match": ","
        }
      ]
    },
    "statement-function-declaration-parameter": {
      "begin": "(?:((?<!\\w|\\.)\\bmut)\\s+)?([_[:alpha:]]\\w*)\\s*(?=:)",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.the"
        },
        "2": {
          "name": "variable.parameter.the"
        }
      },
      "end": "(?=,|\\))",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#type-annotation"
        },
        {
          "include": "#variable-initializer"
        }
      ]
    },
    "statement-function-declaration-return-type": {
      "name": "meta.return.type.the",
      "begin": "(?<=\\))\\s*(?=[^\\{]*\\{)",
      "end": "(?<!\\))(?=\\{)",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#types"
        }
      ]
    },
    "statement-if": {
      "patterns": [
        {
          "name": "meta.if.the",
          "begin": "(?<!\\w|\\.)(?=(\\bif)\\s*)",
          "end": "(?<=\\})",
          "patterns": [
            {
              "begin": "(?<!\\w|\\.)(\\bif)\\s*",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.conditional.the"
                }
              },
              "end": "(?=\\{)",
              "patterns": [
                {
                  "include": "#comments"
                },
                {
                  "include": "#expressions"
                }
              ]
            },
            {
              "include": "#block"
            }
          ]
        },
        {
          "name": "meta.elif.the",
          "begin": "(?<!\\w|\\.)(?=(\\belif)\\s*)",
          "end": "(?<=\\})",
          "patterns": [
            {
              "begin": "(?<!\\w|\\.)(\\belif)\\s*",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.conditional.the"
                }
              },
              "end": "(?=\\{)",
              "patterns": [
                {
                  "include": "#comments"
                },
                {
                  "include": "#expressions"
                }
              ]
            },
            {
              "include": "#block"
            }
          ]
        },
        {
          "name": "meta.else.the",
          "begin": "(?<!\\w|\\.)(?=(\\belse)\\s*\\{)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.conditional.the"
            }
          },
          "end": "(?<=\\})",
          "patterns": [
            {
              "include": "#block"
            }
          ]
        }
      ]
    },
    "statement-loop": {
      "name": "meta.loop.the",
      "begin": "(?<!\\w|\\.)(?=\\bloop\\s*)",
      "end": "(?<=\\})",
      "patterns": [
        {
          "begin": "(?<!\\w|\\.)(\\bloop)\\s*(?:(\\()\\s*)?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.loop.the"
            },
            "2": {
              "name": "meta.brace.round.the"
            }
          },
          "end": "(?:(\\))\\s*)?(?=\\{)",
          "endCaptures": {
            "1": {
              "name": "meta.brace.round.the"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#statement-variable-declaration"
            },
            {
              "include": "#expressions"
            },
            {
              "include": "#punctuation-semicolon"
            }
          ]
        },
        {
          "include": "#block"
        }
      ]
    },
    "statement-main": {
      "name": "meta.function.main.the",
      "begin": "(?<!\\w|\\.)(\\bmain)(?!\\w|\\.)\\s*(?=\\{)",
      "beginCaptures": {
        "1": {
          "name": "keyword.declaration.the"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#block"
        }
      ]
    },
    "statement-object-declaration": {
      "name": "meta.object.declaration.the",
      "begin": "(?<!\\w|\\.)(?:(\\bexport)\\s+)?(\\bobj)(?!\\w|\\.)\\s+([_[:alpha:]]\\w*)\\s*(\\{)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.the"
        },
        "2": {
          "name": "storage.type.object.the"
        },
        "3": {
          "name": "entity.name.type.object.the"
        },
        "4": {
          "name": "punctuation.definition.block.the"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.the"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#statement-object-field"
        },
        {
          "include": "#statement-function-declaration"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "statement-object-field": {
      "name": "meta.field.declaration.the",
      "begin": "(?:((?<!\\w|\\.)\\bmut)\\s+)?([_[:alpha:]]\\w*)\\s*(?=:)",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.the"
        },
        "2": {
          "name": "meta.definition.property.the variable.object.property.the"
        }
      },
      "end": "(?=;|\\}|$|\\/[\\/\\*])",
      "patterns": [
        {
          "include": "#type-annotation"
        }
      ]
    },
    "statement-return": {
      "name": "meta.return.the",
      "begin": "(?<!\\w|\\.)(\\breturn)(?!\\w|\\.)",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.flow.the"
        }
      },
      "end": "(?=[;}]|$)",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#expressions"
        }
      ]
    },
    "statement-variable-declaration": {
      "name": "meta.var.expr.the",
      "begin": "(?:((?<!\\w|\\.)\\bmut)\\s+)?([_[:alpha:]]\\w*)\\s*(?=:=?)",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.the"
        },
        "2": {
          "name": "meta.definition.variable.the variable.other.readwrite.the"
        }
      },
      "end": "(?=[);}\\]])|(?=^\\s*$)|(?<=\\S)(?<!=)(?=\\s*$)",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#type-annotation"
        },
        {
          "include": "#variable-initializer"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "meta.type.paren.cover.the",
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.the"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.the"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#types"
            },
            {
              "name": "punctuation.separator.parameter.the",
              "match": ","
            }
          ]
        },
        {
          "include": "#type-function-parameter"
        },
        {
          "include": "#type-function-return-type"
        },
        {
          "include": "#type-reference"
        },
        {
          "include": "#type-array"
        },
        {
          "include": "#type-primitive-builtin"
        },
        {
          "include": "#type-primitive"
        },
        {
          "name": "keyword.operator.optional.the",
          "match": "\\?"
        },
        {
          "name": "keyword.operator.variadic.the",
          "match": "\\.\\.\\."
        }
      ]
    },
    "type-annotation": {
      "name": "meta.type.annotation.the",
      "begin": "\\:(?!\\=)",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator.type.annotation.the"
        }
      },
      "end": "(?<!:)((?=$|^|[,);\\}\\]])|(?==))",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#types"
        }
      ]
    },
    "type-array": {
      "name": "meta.type.array.the",
      "begin": "(?=\\[\\])",
      "end": "(\\[)(\\])",
      "endCaptures": {
        "1": {
          "name": "meta.brace.square.the"
        },
        "2": {
          "name": "meta.brace.square.the"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#types"
        }
      ]
    },
    "type-function-parameter": {
      "begin": "(?:((?<!\\w|\\.)\\bmut)\\s+)?([_[:alpha:]]\\w*)\\s*(?=:)",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.the"
        },
        "2": {
          "name": "variable.parameter.the"
        }
      },
      "end": "(?=[,)])",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#type-annotation"
        }
      ]
    },
    "type-function-return-type": {
      "begin": "->",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator.type.function.the"
        }
      },
      "end": "(?<!->)(?=[\\)\\{\\}=;]|$)",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#types"
        }
      ]
    },
    "type-primitive": {
      "name": "entity.name.type.the",
      "match": "[_[:alpha:]]\\w*"
    },
    "type-primitive-builtin": {
      "name": "storage.type.built-in.primitive.the",
      "match": "(?<!\\w|\\.)(any|bool|byte|char|f(?:32|64)|float|i(?:8|16|32|64)|int|str|u(?:8|16|32|64)|void)(?!\\w|\\.(?!\\.\\.))"
    },
    "type-reference": {
      "name": "meta.type.reference.the",
      "begin": "(?<!\\w|\\.)(\\bref)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.expression.reference.the"
        }
      },
      "end": "(?=[,;{}\\)]|$)",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#types"
        }
      ]
    },
    "variable-initializer": {
      "patterns": [
        {
          "begin": ":=",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.assignment.the"
            }
          },
          "end": "(?=[);,}\\]])|(?=^\\s*$)|(?<=\\S)(?<!=)(?=\\s*$)",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#expressions"
            }
          ]
        },
        {
          "begin": "(?<!=|!|:)(=)(?!=)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.assignment.the"
            }
          },
          "end": "(?=[);,}\\]])|(?=^\\s*$)|(?<=\\S)(?<!=)(?=\\s*$)",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#expressions"
            }
          ]
        }
      ]
    }
  }
}
